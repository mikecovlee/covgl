CGLC入门指南
适用于Build 15-04-211-xx
注意事项：CGLC使用名称空间cglc，不使用将会导致编译器报错！请使用支持C++11标准的G++编译器进行编译！CGLC暂时不支持宽字符(中文等UTF字符)，如使用将导致绘制错误(不会报错)。在使用CGLC期间请不要使用printf,cout,cerr等输出函数，会导致未知的错误！

提示：请将解压后的CGL文件夹(不出意外应该与本文件在同一目录中)放入您的源文件所在目录中，并在源文件开头处中加入语句#include"CGL/Console"(不使用任何控件)或#include"CGL/Views"(使用官方控件)

1：cglc::screen的操作
在CGLC中，所有的工作都围绕screen展开，所以要使用CGLC第一步要创建一个screen。
cglc::screen scr;
这样就创建了一个名为scr的screen。您可以创建多个screen按需绘制。您可以对您创建的screen类对象做出以下操作：

scr.renderer访问渲染器，类型为buffer，后面将进行介绍

scr.clean(bool)清除所有内容，true则将设备屏幕进行清空，默认参数为false

scr<<View将控件View绘制到screen上

scr.draw(int,int,c_point)在指定位置绘制，第一个参数为横坐标，第二个参数为纵坐标，第三个参数是一个c_point类型，后面将会进行介绍。

scr.updscr(int)绘制到设备屏幕上，参数为延迟时间，单位为微秒，默认参数是cglc::automatic(自动适配设备)，您可以使用下面几个预定义的量:
cglc::slow慢速
cglc::normal正常
cglc::fast快速
cglc::max最快
如果您有一定的编程经验可以自定义绘制速度，如调整了延迟时间仍有绘制卡顿您可以考虑更改一下您的终端字体大小。

scr.width(),scr.high()获取宽高

2：cglc::c_point的操作
上节我们提到了draw函数，其中有一个参数为c_point，这就是我们这节要介绍的内容。c_point是CGLC中的基础像素，包括screen,buffer在内的绘制原理都基于此类型。您能够创建N多个c_point，或者将它们装到容器中，都可以。您可以对c_point做出以下操作：

“=”赋值操作，您可以把一个char类型的量赋予c_point，screen的绘制操作会把您所赋予的值显示出来

c_point::image()可以获取当前的图案，返回类型为char

c_point::text，c_point::back更改字体颜色和背景色，类型为c_color，后面会进行介绍

更多精彩，敬请期待！
责任编辑：李登淳